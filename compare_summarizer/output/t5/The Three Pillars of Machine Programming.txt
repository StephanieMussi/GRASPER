we envision machine learn- ing and automated reasoning techniques that will enable new programming systems. these systems will deliver a significant degree of automation to reduce the cost of producing secure, correct, and efficient software. a number of technological developments over the past few years, however, are creating both the need and the opportu- nity for transformative advances in our ability to use ma- chines to help users write software. a machine programming system is any system that automates some or all of the steps ­­ the goal of machine programming is to remove the burden of writing correct and efficient code from a human programmer and to instead place it on a machine. intention corresponds to the ability of the machine to understand the programmer’s goals through more natural forms of inter- action. invention is the ability of the machine to dis- cover how to accomplish such goals. Adaptation is the ability to autonomously evolve software, whether to make it exe- cute efficiently on new or existing platforms, or to fix errors and address vulnerabilities. a list of examples of systems for that subdomain is used for research in intention. this table is meant as an example of work in subdomains of intention. it is possible to synthesize a desired string manipulation from a small number of examples. a similar observa- tion has been made in the synthesis of Java APIs. a similar observa- tion has been made in the synthesis of SQL queries and the synthesis of Java APIs [50, 83]. a similar observa- many of these systems, however, are one-off efforts targeted at narrow domains. one of the major questions is how to scale such high-level interactions to richer more complex tasks. both the program synthesis and the machine learning communities have made notable progress in this space in recent years. but there remain many open problems to be solved. see Table 2 for highlights of existing research in the space of invention. see Table 2 for highlights of existing research in the invention pillar. see Table 2 for highlights of existing research. a major opportunity for breakthroughs in the invention problem lies at the intersection of the two lines of research. one of the challenges is to develop sys- tems that can solve large-scale invention challenges. machine learning can be seen as a form of invention, but it can also be a form of constraint-based synthesis. a sys- tem can be used to learn distributions over the space of programs that are conditioned on features from the stated goals of the desired program s systems that can better mimic the way programmers approach problems today. using knowledge accumulated through practice to iden- tify the core algorithmic building blocks needed to solve a problem. this includes reasoning at a high-level of abstraction about how those building blocks fit together, and then reasoning at the code level in a targeted fashion. applying ML in this domain may require a combination of new ML methods that can learn from data-sources aimed at humans, with novel solutions to exploit large- s future directions include the addi- tion of machine learning to enhance current latent bug detection techniques. future directions include the addi- tion of machine learning to enhance current latent bug detection techniques. future directions include the addi- tion of machine learning to enhance current latent bug detection techniques. future directions include the addi- tion of machine learning to enhance current latent bug detection techniques and to generate more sophis- ticated corrections for larger classes of bugs. future directions include the addi- versiuneversiuneversiune the challenge in designing a machine programming system is to understand this interplay. verified lifting tools input code written in one language, translate it into a new language. it then formally verify- es that the new code produces results that are consis- tent with the original code. the challenge is to understand how this interplay is supportive of the needs of any given pillar, says robert mcdonald. mcdonald says the challenge is to understand how this interplay data privacy is an open issue of machine program- ing data. programmers are more likely to come from a broad range of academic and business backgrounds. as machine programming systems evolve so will the data they ingest to baseline and advance the system. a significant portion of this lifecycle manage- ment will be centered on managing the data that are required for such an adaptive machine programming system. as machine programming systems evolve so will the data they ingest to baseline and advance the system, a system grounded in intention versiune in this paper, we explored the impact of data as it pertains to machine programming. there are numerous open problems that must be solved to make machine programming a practical reality. if we can agree on a conceptual framework to organize this research, it will help us advance the field and more quickly bring us to a world where every- one programs computers; on human-terms with machine systems handling the low level details of finding the right algorithm for the right hardware to solve the right problem. if we can agree on a gra https://doi.org/10.1145/2628071.2628092 [8] Xinyun Chen, Chang Liu, and Dawn Song. 2017. Towards Synthesizing Complex Programs from Input-Output Examples. CoRR abs/1706.01284 (2017). arXiv:1706.01284 http://arxiv.org/abs/1706.01284 [19] Xinyun Chen, Chang Liu, and Dawn Song. 2017. DeepCoder: ­­ https://arxiv.org/abs/1712.01208. http://arxiv.org/abs/1608.04428. http://arxiv.org/abs/1608.04428. http://arxiv.org/abs/1608.04428. http://arxiv.org/abs/1608.04428. http://arxiv.org/abs/1608.04428. http://arxiv.org/abs/ http://arxiv. org/abs/1410.5401 [33] Sumit Gulwani, Susmit Jha, Ashish Tiwari, and Ramarathnam Venkate- san. 2011. Synthesis of loop-free programs. In Proceedings of the 32nd ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI ’11). ACM, New York, NY, USA, 317–330. https://doi.org/10. 1145/1926­­­ https://doi.org/10.1145/3133908 [45] Sergey Mechtaev, Jooyong Yi, and Abhik Roychoudhury. 2016. Angelix: scalable multiline program patch synthesis via symbolic analysis. In Proceedings of the 38th International Conference on Software Engineering, ICSE 2016, Austin, TX, USA, May 14-22, 2016. 691–701. [46] Na Meng, Miryung Kim, and Kathryn S. McKinley. 2011. Systematic https://doi.org/10.1145/2594291.2594339 [57] Nadia Polikarpova, Ivan Kuraj, and Armando Solar-Lezama. 2016. Pro-gram synthesis from polymorphic refinement types. In Proceedings of the 37th ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI 2016, Santa Barbara, CA, USA, June 13-17, 2016. 522–538. https://doi.org/10.1145/2908080.29080 in Proceedings of the 39th International Conference on Software Engineering, ICSE 2017, Buenos Aires, Argentina, May 20-28, 2017. [66] Stelios Sidiroglou-Douskos, Eric Lahtinen, Fan Long, Deokhwan Kim, and Martin C. Rinard. 2015. Targeted Automatic Integer Overflow Discovery Using Goal-Directed Condi- tional Branch Enforcement. in Proceedings of the Twentieth Interna- ­­ Xiaojun Xiong, Jie Wang, Runfa Yan, Jiachen Zhang, Shi Han, Gang Huang, and Lu Zhang. 2017. Precise Condition Synthesis for Program Repair. Xiaojun Xiong, Jie Wang, Jie Wang, Runfa Yan, Jiachen Zhang, Shi Han, Gang Huang, and Lu Zhang. 2017. Precise Condition Synthesis for Program Repair. Xiaojun Xiong, Jie